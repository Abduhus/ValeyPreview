// Vercel Configuration Validator
// This script checks for common Vercel configuration issues

const fs = require('fs');

console.log('üîç Validating Vercel configuration...');
console.log('='.repeat(50));

let hasErrors = false;

// Check if vercel.json exists
if (!fs.existsSync('vercel.json')) {
  console.log('‚ùå vercel.json not found');
  hasErrors = true;
  process.exit(1);
}

// Read and parse vercel.json
let vercelConfig;
try {
  const configContent = fs.readFileSync('vercel.json', 'utf8');
  vercelConfig = JSON.parse(configContent);
  console.log('‚úÖ vercel.json found and valid JSON');
} catch (error) {
  console.log('‚ùå vercel.json is not valid JSON:', error.message);
  hasErrors = true;
  process.exit(1);
}

// Check for conflicting properties
console.log('\nüîß Checking for configuration conflicts...');

if (vercelConfig.builds && vercelConfig.functions) {
  console.log('‚ùå ERROR: Both "builds" and "functions" properties found');
  console.log('   The "functions" property cannot be used with "builds"');
  console.log('   Please remove the "functions" property');
  hasErrors = true;
} else {
  console.log('‚úÖ No conflicting properties found');
}

// Validate builds configuration
if (vercelConfig.builds) {
  console.log('\nüì¶ Validating builds configuration...');
  console.log(`‚úÖ Found ${vercelConfig.builds.length} build(s)`);
  
  vercelConfig.builds.forEach((build, index) => {
    console.log(`\n   Build ${index + 1}:`);
    console.log(`   ‚úÖ Source: ${build.src}`);
    console.log(`   ‚úÖ Builder: ${build.use}`);
    
    if (build.config) {
      console.log(`   ‚úÖ Config: ${JSON.stringify(build.config)}`);
    }
    
    // Check if source files exist
    if (build.src !== 'package.json' && !fs.existsSync(build.src)) {
      console.log(`   ‚ö†Ô∏è  Warning: Source file "${build.src}" not found`);
    }
  });
}

// Validate routes configuration
if (vercelConfig.routes) {
  console.log('\nüõ£Ô∏è  Validating routes configuration...');
  console.log(`‚úÖ Found ${vercelConfig.routes.length} route(s)`);
  
  vercelConfig.routes.forEach((route, index) => {
    console.log(`   Route ${index + 1}: ${route.src} ‚Üí ${route.dest}`);
  });
}

// Check API directory
console.log('\nüñ•Ô∏è  Checking API configuration...');
if (fs.existsSync('api')) {
  console.log('‚úÖ api directory found');
  
  if (fs.existsSync('api/index.js')) {
    console.log('‚úÖ api/index.js found');
  } else {
    console.log('‚ö†Ô∏è  api/index.js not found');
  }
} else {
  console.log('‚ö†Ô∏è  api directory not found');
}

// Check package.json
console.log('\nüì¶ Checking package.json...');
if (fs.existsSync('package.json')) {
  try {
    const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    console.log('‚úÖ package.json found and valid');
    
    if (pkg.scripts && pkg.scripts['vercel-build']) {
      console.log('‚úÖ vercel-build script found');
    } else {
      console.log('‚ö†Ô∏è  vercel-build script not found');
    }
    
    if (pkg.scripts && pkg.scripts.build) {
      console.log('‚úÖ build script found');
    } else {
      console.log('‚ö†Ô∏è  build script not found');
    }
  } catch (error) {
    console.log('‚ùå package.json is not valid JSON');
    hasErrors = true;
  }
} else {
  console.log('‚ùå package.json not found');
  hasErrors = true;
}

// Final validation result
console.log('\n' + '='.repeat(50));
if (hasErrors) {
  console.log('‚ùå Configuration validation FAILED');
  console.log('Please fix the errors above before deploying to Vercel');
  process.exit(1);
} else {
  console.log('‚úÖ Configuration validation PASSED');
  console.log('Your Vercel configuration is valid and ready for deployment!');
  console.log('');
  console.log('üöÄ Ready to deploy:');
  console.log('   vercel --prod');
  console.log('   or use the deployment scripts');
}

console.log('\nüìñ Vercel Documentation: https://vercel.com/docs/concepts/projects/project-configuration');